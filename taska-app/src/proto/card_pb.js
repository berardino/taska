// source: card.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var google_protobuf_wrappers_pb = require("google-protobuf/google/protobuf/wrappers_pb.js");
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol("proto.taska.proto.ArchiveCardReq", null, global);
goog.exportSymbol("proto.taska.proto.ArchiveCardRes", null, global);
goog.exportSymbol("proto.taska.proto.CreateCardReq", null, global);
goog.exportSymbol("proto.taska.proto.CreateCardRes", null, global);
goog.exportSymbol("proto.taska.proto.GetCardReq", null, global);
goog.exportSymbol("proto.taska.proto.GetCardRes", null, global);
goog.exportSymbol("proto.taska.proto.UnArchiveCardReq", null, global);
goog.exportSymbol("proto.taska.proto.UnArchiveCardRes", null, global);
goog.exportSymbol("proto.taska.proto.UpdateCardReq", null, global);
goog.exportSymbol(
  "proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp",
  null,
  global
);
goog.exportSymbol(
  "proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp",
  null,
  global
);
goog.exportSymbol("proto.taska.proto.UpdateCardReq.Update", null, global);
goog.exportSymbol(
  "proto.taska.proto.UpdateCardReq.Update.CmdCase",
  null,
  global
);
goog.exportSymbol("proto.taska.proto.UpdateCardRes", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.CreateCardReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.CreateCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.CreateCardReq.displayName =
    "proto.taska.proto.CreateCardReq";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.CreateCardRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.CreateCardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.CreateCardRes.displayName =
    "proto.taska.proto.CreateCardRes";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.GetCardReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.GetCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.GetCardReq.displayName = "proto.taska.proto.GetCardReq";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.GetCardRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.GetCardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.GetCardRes.displayName = "proto.taska.proto.GetCardRes";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.ArchiveCardReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.ArchiveCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.ArchiveCardReq.displayName =
    "proto.taska.proto.ArchiveCardReq";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.ArchiveCardRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.ArchiveCardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.ArchiveCardRes.displayName =
    "proto.taska.proto.ArchiveCardRes";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UnArchiveCardReq = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.UnArchiveCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UnArchiveCardReq.displayName =
    "proto.taska.proto.UnArchiveCardReq";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UnArchiveCardRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.UnArchiveCardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UnArchiveCardRes.displayName =
    "proto.taska.proto.UnArchiveCardRes";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UpdateCardReq = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.taska.proto.UpdateCardReq.repeatedFields_,
    null
  );
};
goog.inherits(proto.taska.proto.UpdateCardReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UpdateCardReq.displayName =
    "proto.taska.proto.UpdateCardReq";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UpdateCardReq.Update = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.taska.proto.UpdateCardReq.Update.oneofGroups_
  );
};
goog.inherits(proto.taska.proto.UpdateCardReq.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UpdateCardReq.Update.displayName =
    "proto.taska.proto.UpdateCardReq.Update";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.displayName =
    "proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(
  proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp,
  jspb.Message
);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.displayName =
    "proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.taska.proto.UpdateCardRes = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.taska.proto.UpdateCardRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.taska.proto.UpdateCardRes.displayName =
    "proto.taska.proto.UpdateCardRes";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.CreateCardReq.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.CreateCardReq.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.CreateCardReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.CreateCardReq.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        listId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        title: jspb.Message.getFieldWithDefault(msg, 2, ""),
        description:
          (f = msg.getDescription()) &&
          google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.CreateCardReq}
 */
proto.taska.proto.CreateCardReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.CreateCardReq();
  return proto.taska.proto.CreateCardReq.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.CreateCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.CreateCardReq}
 */
proto.taska.proto.CreateCardReq.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setListId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTitle(value);
        break;
      case 3:
        var value = new google_protobuf_wrappers_pb.StringValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader
        );
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.CreateCardReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.CreateCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.CreateCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.CreateCardReq.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getListId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};

/**
 * optional string list_id = 1;
 * @return {string}
 */
proto.taska.proto.CreateCardReq.prototype.getListId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.CreateCardReq} returns this
 */
proto.taska.proto.CreateCardReq.prototype.setListId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string title = 2;
 * @return {string}
 */
proto.taska.proto.CreateCardReq.prototype.getTitle = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.CreateCardReq} returns this
 */
proto.taska.proto.CreateCardReq.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.StringValue description = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.taska.proto.CreateCardReq.prototype.getDescription = function () {
  return /** @type{?proto.google.protobuf.StringValue} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_wrappers_pb.StringValue,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.taska.proto.CreateCardReq} returns this
 */
proto.taska.proto.CreateCardReq.prototype.setDescription = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.taska.proto.CreateCardReq} returns this
 */
proto.taska.proto.CreateCardReq.prototype.clearDescription = function () {
  return this.setDescription(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taska.proto.CreateCardReq.prototype.hasDescription = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.CreateCardRes.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.CreateCardRes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.CreateCardRes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.CreateCardRes.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.CreateCardRes}
 */
proto.taska.proto.CreateCardRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.CreateCardRes();
  return proto.taska.proto.CreateCardRes.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.CreateCardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.CreateCardRes}
 */
proto.taska.proto.CreateCardRes.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.CreateCardRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.CreateCardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.CreateCardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.CreateCardRes.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.taska.proto.CreateCardRes.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.CreateCardRes} returns this
 */
proto.taska.proto.CreateCardRes.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.GetCardReq.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.GetCardReq.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.GetCardReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.GetCardReq.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.GetCardReq}
 */
proto.taska.proto.GetCardReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.GetCardReq();
  return proto.taska.proto.GetCardReq.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.GetCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.GetCardReq}
 */
proto.taska.proto.GetCardReq.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.GetCardReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.GetCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.GetCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.GetCardReq.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.taska.proto.GetCardReq.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.GetCardReq} returns this
 */
proto.taska.proto.GetCardReq.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.GetCardRes.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.GetCardRes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.GetCardRes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.GetCardRes.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        listId: jspb.Message.getFieldWithDefault(msg, 1, ""),
        title: jspb.Message.getFieldWithDefault(msg, 2, ""),
        description:
          (f = msg.getDescription()) &&
          google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.GetCardRes}
 */
proto.taska.proto.GetCardRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.GetCardRes();
  return proto.taska.proto.GetCardRes.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.GetCardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.GetCardRes}
 */
proto.taska.proto.GetCardRes.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setListId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTitle(value);
        break;
      case 3:
        var value = new google_protobuf_wrappers_pb.StringValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader
        );
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.GetCardRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.GetCardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.GetCardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.GetCardRes.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getListId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};

/**
 * optional string list_id = 1;
 * @return {string}
 */
proto.taska.proto.GetCardRes.prototype.getListId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.GetCardRes} returns this
 */
proto.taska.proto.GetCardRes.prototype.setListId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string title = 2;
 * @return {string}
 */
proto.taska.proto.GetCardRes.prototype.getTitle = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.GetCardRes} returns this
 */
proto.taska.proto.GetCardRes.prototype.setTitle = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional google.protobuf.StringValue description = 3;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.taska.proto.GetCardRes.prototype.getDescription = function () {
  return /** @type{?proto.google.protobuf.StringValue} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_wrappers_pb.StringValue,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.taska.proto.GetCardRes} returns this
 */
proto.taska.proto.GetCardRes.prototype.setDescription = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.taska.proto.GetCardRes} returns this
 */
proto.taska.proto.GetCardRes.prototype.clearDescription = function () {
  return this.setDescription(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taska.proto.GetCardRes.prototype.hasDescription = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.ArchiveCardReq.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.ArchiveCardReq.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.ArchiveCardReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.ArchiveCardReq.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.ArchiveCardReq}
 */
proto.taska.proto.ArchiveCardReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.ArchiveCardReq();
  return proto.taska.proto.ArchiveCardReq.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.ArchiveCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.ArchiveCardReq}
 */
proto.taska.proto.ArchiveCardReq.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.ArchiveCardReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.ArchiveCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.ArchiveCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.ArchiveCardReq.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.taska.proto.ArchiveCardReq.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.ArchiveCardReq} returns this
 */
proto.taska.proto.ArchiveCardReq.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.ArchiveCardRes.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.ArchiveCardRes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.ArchiveCardRes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.ArchiveCardRes.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.ArchiveCardRes}
 */
proto.taska.proto.ArchiveCardRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.ArchiveCardRes();
  return proto.taska.proto.ArchiveCardRes.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.ArchiveCardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.ArchiveCardRes}
 */
proto.taska.proto.ArchiveCardRes.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.ArchiveCardRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.ArchiveCardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.ArchiveCardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.ArchiveCardRes.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UnArchiveCardReq.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UnArchiveCardReq.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UnArchiveCardReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UnArchiveCardReq.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UnArchiveCardReq}
 */
proto.taska.proto.UnArchiveCardReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UnArchiveCardReq();
  return proto.taska.proto.UnArchiveCardReq.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UnArchiveCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UnArchiveCardReq}
 */
proto.taska.proto.UnArchiveCardReq.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UnArchiveCardReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UnArchiveCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UnArchiveCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UnArchiveCardReq.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.taska.proto.UnArchiveCardReq.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.UnArchiveCardReq} returns this
 */
proto.taska.proto.UnArchiveCardReq.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UnArchiveCardRes.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UnArchiveCardRes.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UnArchiveCardRes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UnArchiveCardRes.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UnArchiveCardRes}
 */
proto.taska.proto.UnArchiveCardRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UnArchiveCardRes();
  return proto.taska.proto.UnArchiveCardRes.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UnArchiveCardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UnArchiveCardRes}
 */
proto.taska.proto.UnArchiveCardRes.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UnArchiveCardRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UnArchiveCardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UnArchiveCardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UnArchiveCardRes.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.taska.proto.UpdateCardReq.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UpdateCardReq.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UpdateCardReq.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UpdateCardReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UpdateCardReq.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ""),
        updatesList: jspb.Message.toObjectList(
          msg.getUpdatesList(),
          proto.taska.proto.UpdateCardReq.Update.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UpdateCardReq}
 */
proto.taska.proto.UpdateCardReq.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UpdateCardReq();
  return proto.taska.proto.UpdateCardReq.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UpdateCardReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UpdateCardReq}
 */
proto.taska.proto.UpdateCardReq.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = new proto.taska.proto.UpdateCardReq.Update();
        reader.readMessage(
          value,
          proto.taska.proto.UpdateCardReq.Update.deserializeBinaryFromReader
        );
        msg.addUpdates(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UpdateCardReq.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UpdateCardReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UpdateCardReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UpdateCardReq.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.taska.proto.UpdateCardReq.Update.serializeBinaryToWriter
    );
  }
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.taska.proto.UpdateCardReq.Update.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.taska.proto.UpdateCardReq.Update.CmdCase = {
  CMD_NOT_SET: 0,
  P_UPDATE_CARD_TITLE_CMD: 1,
  P_UPDATE_CARD_DESCRIPTION_CMD: 2,
};

/**
 * @return {proto.taska.proto.UpdateCardReq.Update.CmdCase}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.getCmdCase = function () {
  return /** @type {proto.taska.proto.UpdateCardReq.Update.CmdCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.taska.proto.UpdateCardReq.Update.oneofGroups_[0]
  ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UpdateCardReq.Update.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UpdateCardReq.Update.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UpdateCardReq.Update} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UpdateCardReq.Update.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        pUpdateCardTitleCmd:
          (f = msg.getPUpdateCardTitleCmd()) &&
          proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.toObject(
            includeInstance,
            f
          ),
        pUpdateCardDescriptionCmd:
          (f = msg.getPUpdateCardDescriptionCmd()) &&
          proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.toObject(
            includeInstance,
            f
          ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UpdateCardReq.Update}
 */
proto.taska.proto.UpdateCardReq.Update.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UpdateCardReq.Update();
  return proto.taska.proto.UpdateCardReq.Update.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UpdateCardReq.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UpdateCardReq.Update}
 */
proto.taska.proto.UpdateCardReq.Update.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp();
        reader.readMessage(
          value,
          proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp
            .deserializeBinaryFromReader
        );
        msg.setPUpdateCardTitleCmd(value);
        break;
      case 2:
        var value = new proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp();
        reader.readMessage(
          value,
          proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp
            .deserializeBinaryFromReader
        );
        msg.setPUpdateCardDescriptionCmd(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UpdateCardReq.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UpdateCardReq.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UpdateCardReq.Update.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPUpdateCardTitleCmd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.serializeBinaryToWriter
    );
  }
  f = message.getPUpdateCardDescriptionCmd();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp
        .serializeBinaryToWriter
    );
  }
};

/**
 * optional PUpdateCardTitleOp p_update_card_title_cmd = 1;
 * @return {?proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.getPUpdateCardTitleCmd = function () {
  return /** @type{?proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp} */ (jspb.Message.getWrapperField(
    this,
    proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp,
    1
  ));
};

/**
 * @param {?proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp|undefined} value
 * @return {!proto.taska.proto.UpdateCardReq.Update} returns this
 */
proto.taska.proto.UpdateCardReq.Update.prototype.setPUpdateCardTitleCmd = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    1,
    proto.taska.proto.UpdateCardReq.Update.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.taska.proto.UpdateCardReq.Update} returns this
 */
proto.taska.proto.UpdateCardReq.Update.prototype.clearPUpdateCardTitleCmd = function () {
  return this.setPUpdateCardTitleCmd(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.hasPUpdateCardTitleCmd = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional PUpdateCardDescriptionOp p_update_card_description_cmd = 2;
 * @return {?proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.getPUpdateCardDescriptionCmd = function () {
  return /** @type{?proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} */ (jspb.Message.getWrapperField(
    this,
    proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp,
    2
  ));
};

/**
 * @param {?proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp|undefined} value
 * @return {!proto.taska.proto.UpdateCardReq.Update} returns this
 */
proto.taska.proto.UpdateCardReq.Update.prototype.setPUpdateCardDescriptionCmd = function (
  value
) {
  return jspb.Message.setOneofWrapperField(
    this,
    2,
    proto.taska.proto.UpdateCardReq.Update.oneofGroups_[0],
    value
  );
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.taska.proto.UpdateCardReq.Update} returns this
 */
proto.taska.proto.UpdateCardReq.Update.prototype.clearPUpdateCardDescriptionCmd = function () {
  return this.setPUpdateCardDescriptionCmd(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taska.proto.UpdateCardReq.Update.prototype.hasPUpdateCardDescriptionCmd = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        title: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp();
  return proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTitle(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string title = 1;
 * @return {string}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.prototype.getTitle = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp} returns this
 */
proto.taska.proto.UpdateCardReq.PUpdateCardTitleOp.prototype.setTitle = function (
  value
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.toObject = function (
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        description:
          (f = msg.getDescription()) &&
          google_protobuf_wrappers_pb.StringValue.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.deserializeBinary = function (
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp();
  return proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new google_protobuf_wrappers_pb.StringValue();
        reader.readMessage(
          value,
          google_protobuf_wrappers_pb.StringValue.deserializeBinaryFromReader
        );
        msg.setDescription(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.StringValue.serializeBinaryToWriter
    );
  }
};

/**
 * optional google.protobuf.StringValue description = 1;
 * @return {?proto.google.protobuf.StringValue}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.getDescription = function () {
  return /** @type{?proto.google.protobuf.StringValue} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_wrappers_pb.StringValue,
    1
  ));
};

/**
 * @param {?proto.google.protobuf.StringValue|undefined} value
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} returns this
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.setDescription = function (
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp} returns this
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.clearDescription = function () {
  return this.setDescription(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.taska.proto.UpdateCardReq.PUpdateCardDescriptionOp.prototype.hasDescription = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.taska.proto.UpdateCardReq.prototype.getId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!proto.taska.proto.UpdateCardReq} returns this
 */
proto.taska.proto.UpdateCardReq.prototype.setId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated Update updates = 2;
 * @return {!Array<!proto.taska.proto.UpdateCardReq.Update>}
 */
proto.taska.proto.UpdateCardReq.prototype.getUpdatesList = function () {
  return /** @type{!Array<!proto.taska.proto.UpdateCardReq.Update>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.taska.proto.UpdateCardReq.Update,
    2
  ));
};

/**
 * @param {!Array<!proto.taska.proto.UpdateCardReq.Update>} value
 * @return {!proto.taska.proto.UpdateCardReq} returns this
 */
proto.taska.proto.UpdateCardReq.prototype.setUpdatesList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.taska.proto.UpdateCardReq.Update=} opt_value
 * @param {number=} opt_index
 * @return {!proto.taska.proto.UpdateCardReq.Update}
 */
proto.taska.proto.UpdateCardReq.prototype.addUpdates = function (
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.taska.proto.UpdateCardReq.Update,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.taska.proto.UpdateCardReq} returns this
 */
proto.taska.proto.UpdateCardReq.prototype.clearUpdatesList = function () {
  return this.setUpdatesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.taska.proto.UpdateCardRes.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.taska.proto.UpdateCardRes.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.taska.proto.UpdateCardRes} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.taska.proto.UpdateCardRes.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.taska.proto.UpdateCardRes}
 */
proto.taska.proto.UpdateCardRes.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.taska.proto.UpdateCardRes();
  return proto.taska.proto.UpdateCardRes.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.taska.proto.UpdateCardRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.taska.proto.UpdateCardRes}
 */
proto.taska.proto.UpdateCardRes.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.taska.proto.UpdateCardRes.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.taska.proto.UpdateCardRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.taska.proto.UpdateCardRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.taska.proto.UpdateCardRes.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
};

goog.object.extend(exports, proto.taska.proto);
